var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Hoplab Wiki","text":"<p>Welcome to the Hoplab Wiki repository. This Wiki is a work in progress and an ongoing effort to migrate all the Hoplab knowledge and procedures into a more user-friendly format. This process is currently managed by @costantinoai. For any questions, feel free to ping me.</p>"},{"location":"contribute.html","title":"Hoplab Wiki","text":"<p>Welcome to the Hoplab Wiki repository. This Wiki is a work in progress and an ongoing effort to migrate all the Hoplab knowledge and procedures into a more user-friendly format. This process is currently managed by @costantinoai. For any questions, feel free to ping me.</p> <p>This guide will help you set up, update, and maintain the Wiki both locally and online. Follow the instructions if you want to make changes to the wiki.</p> <ol> <li>Getting Started</li> <li>Editing the Wiki</li> <li>How to Contribute - Easy Workflow</li> <li>How to Contribute - Advanced Workflow</li> <li>Reviewing and Accepting Pull Requests (for Admins)</li> <li>Troubleshooting</li> </ol>"},{"location":"contribute.html#getting-started","title":"Getting Started","text":"<p>Before you begin, ensure you have the following:</p> <ul> <li>A GitHub account</li> <li>Write access to the <code>hoplab-wiki</code> repository in the <code>HOPLAB-LBP</code> organization</li> <li>If you plan on following the Advanced Workflow (encouraged), also make sure that you have Conda or Miniconda installed</li> </ul>"},{"location":"contribute.html#editing-the-wiki","title":"Editing the Wiki","text":"<p>We welcome contributions from all members. All the content of the wiki is written in Markdown files located in the <code>docs</code> directory. You can edit these files in your browser (if you follow the Easy Workflow or locally using any text editor or IDE (e.g., VSCode, Sublime Text) if you follow the Advanced Workflow. </p>"},{"location":"contribute.html#adding-a-new-page","title":"Adding a New Page","text":"<ol> <li>Create a new Markdown file in the <code>docs</code> directory (e.g., <code>docs/new-page.md</code>).</li> <li>Add the new page to the <code>nav</code> section of <code>mkdocs.yml</code>:  <pre><code>nav:\n  - Home: index.md\n  - Guide: guide.md\n  - New Page: new-page.md\n</code></pre></li> </ol>"},{"location":"contribute.html#creating-child-pages","title":"Creating Child Pages","text":"<p>To create a child page, place the Markdown file in a subdirectory and update the <code>nav</code> section in <code>mkdocs.yml</code> accordingly:</p> <ol> <li>Create a new subdirectory in the <code>docs</code> directory (e.g., <code>docs/subdir</code>).</li> <li>Create a new Markdown file in the subdirectory (e.g., <code>docs/subdir/child-page.md</code>).</li> <li>Update the <code>nav</code> section in <code>mkdocs.yml</code>:  <pre><code>nav:\n  - Home: index.md\n  - Guide: guide.md\n  - Subdir:\n      - Child Page: subdir/child-page.md\n</code></pre></li> </ol> <p>For more information on Markdown formatting, refer to the Markdown Guide for basic and more advanced syntax.</p>"},{"location":"contribute.html#how-to-contribute-easy-workflow","title":"How to Contribute - Easy Workflow","text":"<p>The easiest but less preferred way to update the Wiki is to create or edit the Markdown files in the repository directly in your browser. Here\u2019s how to do it:</p> <ol> <li>Navigate to the <code>hoplab-wiki</code> repository on GitHub.</li> <li>Go to the <code>docs</code> folder.</li> <li> <p>To edit an existing file:</p> <ul> <li>Click on the file you want to edit.</li> <li>Click on the pencil icon (\u270f\ufe0f) at the top right to edit the file.</li> <li>Make your changes (see Editing the Wiki for more info) and scroll down to the \"Commit changes\" section.</li> <li>Add a commit message describing your changes.</li> <li>Select \"Commit directly to the <code>main</code> branch\" and click \"Commit changes\".</li> </ul> </li> <li> <p>To create a new file:</p> <ul> <li>Click on \"Add file\" &gt; \"Create new file\".</li> <li>Enter a name for your file in the <code>docs</code> directory (e.g., <code>docs/new-page.md</code>).</li> <li>Add your content in Markdown format (see Editing the Wiki for more info).</li> <li>Scroll down to the \"Commit changes\" section.</li> <li>Add a commit message describing your new file.</li> <li>Select \"Commit directly to the <code>main</code> branch\" and click \"Commit new file\".</li> <li>Navigate to the <code>mkdocs.yml</code> file.</li> <li>Click on the pencil icon (\u270f\ufe0f) at the top right to edit the file.</li> <li>Add the new page to the <code>nav</code> section.</li> <li>Commit your changes directly to the <code>main</code> branch.</li> </ul> </li> </ol> <p>While this method is straightforward, direct changes to the <code>main</code> branch are discouraged as it bypasses the review process.</p>"},{"location":"contribute.html#how-to-contribute-advanced-workflow","title":"How to Contribute - Advanced Workflow","text":"<p>The preferred way to contribute is to clone the repository locally, make your changes, and create a pull request. This ensures that all changes are reviewed before being merged into the main codebase and avoids potential destructive actions. Here\u2019s how to do it:</p>"},{"location":"contribute.html#setting-up-your-local-environment","title":"Setting Up Your Local Environment","text":"<p>First, create a conda environment and install the necessary dependencies within this environment. <pre><code>conda create --name hoplab-wiki python=3.9\nconda activate hoplab-wiki\npip install mkdocs mkdocs-material\n</code></pre></p>"},{"location":"contribute.html#cloning-and-editing-the-repository","title":"Cloning and Editing the Repository","text":"<p>You can use GitHub Desktop for an easier experience, or Git from the command line.</p>"},{"location":"contribute.html#using-github-desktop","title":"Using GitHub Desktop","text":"<ol> <li>Open GitHub Desktop.</li> <li>Click \"File\" &gt; \"Clone Repository\".</li> <li>Select the <code>hoplab-wiki</code> repository from the <code>HOPLAB-LBP</code> organization and click \"Clone\".</li> <li>Make your changes (see Editing the Wiki for more details)</li> </ol>"},{"location":"contribute.html#using-git","title":"Using Git","text":"<ol> <li>Open your terminal (Command Prompt on Windows, Terminal on macOS and Linux).</li> <li>Navigate to the directory where you want to clone the repository: <pre><code>cd path/to/your/directory\n</code></pre></li> <li>Clone the repository: <pre><code>git clone https://github.com/HOPLAB-LBP/hoplab-wiki.git\n</code></pre></li> <li>Navigate to the repository directory: <pre><code>cd hoplab-wiki\n</code></pre></li> <li>Make your changes (see Editing the Wiki for more details)</li> </ol>"},{"location":"contribute.html#building-and-serving-locally-to-test-your-changes","title":"Building and Serving Locally (to test your changes)","text":"<p>To preview your changes locally, you need to build and serve the documentation.</p> <ol> <li>Open your terminal (Command Prompt on Windows, Terminal on macOS and Linux).</li> <li>Navigate to the <code>hoplab-wiki</code> directory: <pre><code>cd path/to/your/hoplab-wiki\n</code></pre></li> <li>Activate your conda environment: <pre><code>conda activate hoplab-wiki\n</code></pre></li> <li>Serve the documentation locally: <pre><code>mkdocs serve\n</code></pre></li> <li>Open your browser and navigate to http://127.0.0.1:8000/.</li> </ol> <p>Note</p> <p>You can edit your files while your serve is deployed, and see the changes live on your browser every time you modify (i.e., save) a file. This will save you a ton of time and commits.</p>"},{"location":"contribute.html#deploying-your-changes","title":"Deploying Your Changes","text":"<p>To deploy your changes to GitHub Pages:</p> <ol> <li>Commit your changes in GitHub Desktop or via Git:  <pre><code>git add .\ngit commit -m \"Describe your changes\"\n</code></pre></li> <li>Push your changes: <pre><code>git push origin main\n</code></pre></li> </ol>"},{"location":"contribute.html#automatic-deployment-with-github-actions","title":"Automatic Deployment with GitHub Actions","text":"<p>This repository is set up to use GitHub Actions for automatic deployment. This means that every time changes are pushed to the <code>main</code> branch, the documentation will automatically be built and deployed to GitHub Pages.</p> <p>Note</p> <p>You do not need to manually run the <code>mkdocs gh-deploy</code> command each time you make changes. Simply push your changes to the <code>main</code> branch, and GitHub Actions will handle the deployment.</p>"},{"location":"contribute.html#creating-a-pull-request","title":"Creating a Pull Request","text":"<p>After pushing your changes to GitHub, create a pull request to ensure that all changes are reviewed before being merged into the main codebase.</p> <ol> <li>Go to the <code>hoplab-wiki</code> repository on GitHub.</li> <li>Click on \"Compare &amp; pull request\".</li> <li>Add a description of your changes and submit the pull request.</li> </ol>"},{"location":"contribute.html#reviewing-and-accepting-pull-requests-for-admins","title":"Reviewing and Accepting Pull Requests (for Admins)","text":"<ol> <li>Go to the <code>hoplab-wiki</code> repository on GitHub.</li> <li>Click on the \"Pull requests\" tab.</li> <li> <p>Review the pull request:</p> </li> <li> <p>Check the changes.</p> </li> <li>Add comments if necessary.</li> <li>If the changes are satisfactory, click \"Merge pull request\".</li> <li>Delete the branch after merging if it's no longer needed.</li> </ol>"},{"location":"contribute.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"contribute.html#permission-denied-or-authentication-issues","title":"Permission Denied or Authentication Issues","text":"<p>If you encounter issues with pushing to the repository, you may need to use a personal access token. Follow these steps:</p> <ol> <li>Create a fine-grained personal access token here.</li> <li>Use this token for authentication when pushing to the repository. More information on how to do so can be found on this issue. Please, first get a fine-grained Personal Access Token as described in the link above, and then follow the instructions in the \"Manually temporary resolving this issue for a single git repository\" section.</li> </ol>"},{"location":"contribute.html#additional-help","title":"Additional Help","text":"<p>For further assistance, refer to the following resources:</p> <ul> <li>MkDocs Documentation</li> <li>MkDocs Material Theme</li> <li>GitHub Pages Documentation</li> </ul> <p>Or ping me.</p> <p>Thank you for contributing to the Hoplab Wiki!</p>"},{"location":"fmri-home.html","title":"Functional MRI","text":"<p>This page is a work in progress and it is based on what I do in my fMRI pipeline. This info may change once we agree on shared practices.</p> <p>IMPORTANT: talk to Joan and Elahe to check on what they do, and standardize.</p> <p>TODO: Add info and links about fmri tasks, preprocessing, GLM, ROIs, MVPA/RSA.</p> <p>TODO: info on how to install main tools used for the fmri workflow for different OSs.</p> <p>TODO: info about instruments and procedures at the hospital.</p> <p>A template folder structure, along with the code to reproduce these analyses, can be found at [PLACEHOLDER]</p>"},{"location":"fmri-home.html#general-notes","title":"General Notes","text":""},{"location":"fmri-home.html#how-to-store-raw-data","title":"How to store raw data","text":"<p>In order to avoid error while converting into BIDS format, the raw data (i.e., the data collected from the scanner, behavioural measure, eye-tracking) should be stored in a folder with the following structure:</p> <pre><code>sourcedata\n\u2514\u2500\u2500 sub-01\n    \u251c\u2500\u2500 bh\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 20240503104938_log_41-1-2_exp.tsv\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 20240503105558_41_1_exp.mat\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 20240503105640_log_41-2-1_exp.tsv\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 20240503110226_41_2_exp.mat\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 20240503110241_log_41-3-2_exp.tsv\n    \u2514\u2500\u2500 nifti\n        \u251c\u2500\u2500 SUBJECTNAME_WIP_CS_3DTFE_8_1.nii\n        \u251c\u2500\u2500 SUBJECTNAME_WIP_Functional_run1_13_1.nii\n        \u2514\u2500\u2500 SUBJECTNAME_WIP_Functional_run2_12_1.nii\n</code></pre>"},{"location":"fmri-home.html#how-to-get-images-from-the-scanner","title":"How to get images from the scanner","text":"<p>For optimal BIDS conversion of fMRI data, it is recommended to initially collect DICOM files (not NIfTI or PAR/REC) at the scanner. Although this adds an extra conversion step and takes longer, it ensures proper conversion into BIDS format. Here is the recommended process:</p> <ol> <li> <p>Initial DICOM Collection:</p> <ul> <li>Collect DICOM files for each modality (e.g., T1 and BOLD) for one subject.</li> <li>Convert these DICOM files to NIfTI format, which will generate JSON sidecar files.</li> </ul> </li> <li> <p>Template Creation:</p> <ul> <li>Rename the JSON files for T1 and BOLD image to <code>sub-xx_T1w.json</code> and <code>sub-xx_task-exp_run-x_bold.json</code></li> <li>Move the JSON files into <code>misc/</code>.</li> </ul> </li> <li> <p>Subsequent Data Collection:</p> <ul> <li>After creating the template JSON files, collect future data in NIfTI format to save time. The <code>01_nifti-to-BIDS.m</code> script will use the JSON templates to populate the BIDS folders, provided that the fMRI sequence remained unchaged (in that case you need to generate new templates from the DICOM files).</li> </ul> </li> </ol>"},{"location":"fmri-home.html#missing-fields-in-json-files","title":"Missing fields in JSON files","text":"<p>Despite these steps, some BIDS fields in the sidecar JSON files may remain empty due to limitations of the Philips scanner, not the conversion tools. The most relevant fields that are left empty due to these limitations are <code>SliceTiming</code> and <code>PhaseEncodingDirection</code>.</p> <ul> <li> <p>SliceTiming:</p> <ul> <li>This field is used by fMRIPrep during slice timing correction.</li> <li>It can be populated using the <code>/utils/get_philips_MB_slicetiming.py</code> script, assuming you have access to a DICOM file and know the multiband factor (default is 2, as used in our lab).</li> <li>Note: The script assumes an interleaved, foot-to-head acquisition, and will not work for other types of acquisitions.</li> </ul> </li> <li> <p>PhaseEncodingDirection:</p> <ul> <li>This BIDS tag allows tools to undistort images.</li> <li>While the Philips DICOM header distinguishes the phase encoding axis (e.g., anterior-posterior vs. left-right), it does not encode the polarity (A-&gt;P vs. P-&gt;A).</li> <li>You will need to check at the scanner or consult with Ron whether the polarity is AP or PA, and correct the <code>?</code> in the JSON file to <code>+</code> or <code>-</code>.</li> </ul> </li> </ul> <p>For more details on Philips DICOM conversion, refer to the following resources:</p> <ul> <li>Philips DICOM Missing Information - dcm2niix</li> <li>PARREC Conversion - dcm2niix</li> </ul>"},{"location":"fmri-home.html#where-to-find-additional-info-on-the-fmri-sequence","title":"Where to find additional info on the fMRI sequence","text":"<p>Additional information on the sequence can be found at the scanner by following these steps:</p> <pre><code>- TODO: document the correct steps to get info on the geometry etc. we need to start new examination, load our sequence, click on one run/T1, and go in the geometry tab. here we have info about polarity, direction etc.\n</code></pre>"},{"location":"fmri-home.html#bids-standards","title":"BIDS standards","text":"<p>TODO: add info about the BIDS standard, and how we use it (from raw to BIDS + derivatives)</p>"},{"location":"fmri-home.html#workflow","title":"Workflow","text":""},{"location":"fmri-home.html#behavioral-data","title":"Behavioral Data","text":"<p>TODO: here Tim should describe name and format of the logfiles</p> <p>TODO: add ref to fMRI task repo</p> <p>The fMRI task script should give two files per run as output. Here is a description of the naming structure and file content:</p> <ol> <li><code>&lt;timestamp&gt;_log_&lt;subID&gt;-&lt;run&gt;-&lt;buttonMapping&gt;_&lt;taskName&gt;.tsv</code>: [PLACEHOLDER]</li> <li><code>&lt;timestamp&gt;_log_&lt;subID&gt;_&lt;run&gt;_&lt;taskName&gt;.mat</code>: [PLACEHOLDER]</li> </ol> <p>If the behavioural data is stored in a <code>sourcedata/sub-xx/bh/</code> folder consistent to the one described above, you can run the <code>02_behavioural-to-BIDS.m</code> script, after editing the parameters at the top of the script. This script iterates through subject-specific directories, targeting behavioral .mat files, then processes and exports trial-related data into BIDS-compliant TSV event files. </p> <p>TODO: above, we need to phrase better and add more info about what these parameters are, possibly with a screenshot of the code. Also, in the code make more clear where the parameters are. TODO: perhaps wrap nifti and bh 2 BIDS in a single script that takes some input arguments?  TODO: we need to add more info about how these files are saved, and more in general about the BIDS structure</p> <p>Ensure that each resulting tsv file has at least three columns representing: <code>onset</code>, <code>duration</code>, <code>trial_type</code>.</p>"},{"location":"fmri-home.html#eye-tracking-data","title":"Eye-Tracking Data","text":"<p>Pre-requisite: To convert EDF files into more easy-to-read ASC files, you need to install the EyeLink Developers Kit / API. More info and how-to:</p> <ul> <li> <p>EyeLink Developers Kit / API</p> </li> <li> <p>Run the ET script to convert to ASC in BIDS format.</p> </li> </ul> <p>Note: BEP020 has not been approved yet. Not sure if the events MSG should be included here or not.</p>"},{"location":"fmri-home.html#fmri-data","title":"fMRI Data","text":""},{"location":"fmri-home.html#bids-conversion","title":"BIDS conversion","text":"<ol> <li> <p>Convert DICOM to BIDS (NIfTI):</p> <ul> <li>Prerequisites:<ul> <li><code>dcm2nii</code></li> <li>Raw data should be organized as: <code>/sourcedata/sub-&lt;xx&gt;/dicom</code></li> <li>MATLAB</li> </ul> </li> </ul> <p>1.1. Download <code>dicm2nii</code> from dicm2nii, unzip, and add to the MATLAB path.</p> <p>1.2. Open MATLAB and type <code>anonymize_dicm</code> in the console. Enter and it will ask you to select the folder where the files are and the folder in which you want to save it: <code>/sourcedata/sub-&lt;xx&gt;/dicom_Anon</code>.</p> <p>1.3. Run the <code>dicm2nii</code> MATLAB function from the unzipped file. Just write <code>dicm2nii</code> in the command window. A pop-up will appear: select DICOM folder (Dicom_Anon. files) and result folder (Dicom_Converted). Untick the compress box and make sure you select save JSON file. Start conversion. A pop-up appears: subject (only number of the subject, e.g., 01). Type: <code>func</code> (T2 scans) and <code>anat</code> (T1 scans). Under modality, we need <code>task-{name of the task}_run-{number of run}_bold</code>, e.g., <code>task-exp_run-2_bold</code>. Modality for anatomical scans is <code>T1W</code>. This pop-up will appear for each run of the fMRI sequence.</p> <p>At the end of this process, we have a new folder called <code>dicom_converted</code> structured as follows: <pre><code>dicom_converted\n\u251c\u2500\u2500 sub-01\n\u2502   \u251c\u2500\u2500 anat\n\u2502   \u2502   \u251c\u2500\u2500 sub-01_T1w.json\n\u2502   \u2502   \u2514\u2500\u2500 sub-01_T1w.nii.gz\n\u2502   \u251c\u2500\u2500 func\n\u2502   \u2502   \u251c\u2500\u2500 sub-01_task-exp_run-1_bold.json\n\u2502   \u2502   \u2514\u2500\u2500 sub-01_task-exp_run-1_bold.nii.gz\n\u2502   \u2514\u2500\u2500 dcmHeaders.mat\n\u2514\u2500\u2500 participants.tsv\n</code></pre></p> <p>Copy your <code>sub-01</code> folder from <code>dicom_converted</code> into the BIDS folder (make a new one if you don't have one).</p> <p>Note: The pop-up only appeared with the first participant and then does it automatically. This is quite annoying as it never gets the participant number right so you have to manually go in and change it. It also only worked when providing it with (enhanced) DICOM files.</p> </li> <li> <p>Validate the BIDS directory (and solve errors):</p> <ul> <li>BIDS Validator</li> </ul> </li> </ol>"},{"location":"fmri-home.html#surface-preprocessing-fastsurfer","title":"Surface preprocessing (FastSurfer)","text":""},{"location":"fmri-home.html#minimal-preprocessing-fmriprep","title":"Minimal preprocessing (fMRIprep)","text":"<p>TODO: explain how to install docker and fmriprep-docker</p> <pre><code>fmriprep-docker \\\n    /data/BIDS \\\n    /data/BIDS/derivatives/fmriprep \\\n    participant \\\n    --work-dir /chess/temp \\ \n    --mem-mb 13000 \\\n    --n-cpus 16 \\\n    --resource-monitor \\\n    -vv \\\n    --output-spaces MNI152NLin2009cAsym:res-2 anat fsnative \\\n    --fs-license-file /misc/.license \\\n    --bold2t1w-dof 9 \\\n    --task exp \\\n    --dummy-scans 0 \\\n    --fs-subjects-dir /data/BIDS/derivatives/fastsurfer \\\n    --notrack \\\n    --participant-label 37 38 39 40\n</code></pre>"},{"location":"fmri-home.html#how-to-interpret-fmriprep-visual-reports","title":"How to interpret fMRIprep visual reports","text":""},{"location":"fmri-home.html#quality-check-mriqc","title":"Quality check (mriqc)","text":"<p>TODO: explain how to save and run this below TODO: explain that the one below may fail, in that case run the single commands separately</p> <pre><code>#!/bin/bash\n\n# Iterate over subject numbers\nfor i in {37..40}; do\n    # Skip subject 0, 5, 14, 31\n    if [ $i -eq 0 ] || [ $i -eq 5 ] || [ $i -eq 14 ] || [ $i -eq 31 ]; then\n        continue\n    fi\n\n    # Format subject number with leading zeros\n    subID=$(printf \"sub-%02d\" $i)\n    echo \"Processing $subID\"\n\n    # Docker command with dynamic subject ID using sudo\n    docker run -it --rm \\\n    -v /data/BIDS/derivatives/fmriprep:/data:ro \\\n    -v /data/BIDS/derivatives/mriqc:/out \\\n    -v /temp_mriqc:/scratch \\\n    nipreps/mriqc:latest /data /out participant \\\n    --participant-label ${subID} \\\n    --nprocs 16 --mem-gb 40 --float32 \\\n     --work-dir /scratch \\\n     --verbose-reports --resource-monitor -vv\n\n    # Wait or perform other actions between runs if needed\n    sleep 0.5\ndone\n\necho \"Running group analysis\"\n\ndocker run -it --rm \\\n-v /data/BIDS/derivatives/fmriprep:/data:ro \\\n-v /data/BIDS/derivatives/mriqc:/out \\\n-v /temp_mriqc:/scratch \\\nnipreps/mriqc:latest /data /out group \\\n--nprocs 16 --mem-gb 40 --float32 \\\n --work-dir /scratch \\\n --verbose-reports --resource-monitor -vv\n\nsleep 0.5\n\necho \"Running classifier\"\ndocker run \\\n-v /temp_mriqc:/scratch \\\n-v /data/BIDS/derivatives/mriqc:/resdir \\\n-w /scratch --entrypoint=mriqc_clf poldracklab/mriqc:latest \\\n --load-classifier -X /resdir/group_T1w.tsv\n</code></pre>"},{"location":"fmri-home.html#running-a-glm-in-spm","title":"Running a GLM in SPM","text":"<p>TODO: show code snippets perhaps? or just reference to the code</p>"},{"location":"fmri-home.html#regions-of-interest","title":"Regions of Interest","text":""},{"location":"fmri-home.html#rois-from-localizers","title":"ROIs from localizers","text":""},{"location":"fmri-home.html#hcp-glasser-parcellation","title":"HCP Glasser parcellation","text":""},{"location":"fmri-home.html#other-parcelsatlases","title":"Other parcels/atlases","text":""},{"location":"fmri-home.html#mvparsa","title":"MVPA/RSA","text":""},{"location":"fmri-home.html#plotting-and-reporting","title":"Plotting and reporting","text":""},{"location":"getstarted.html","title":"Get started at Hoplab","text":"<p>This page is just a placeholder</p>"}]}